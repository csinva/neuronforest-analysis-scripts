package java;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>clib</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("clib") 
@Runtime(CRuntime.class) 
public class ClibLibrary {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>void helloFromC()</code><br>
	 * <i>native declaration : main/cpp/clib.h:2</i>
	 */
	@Name("helloFromC") 
	public static native void helloFromC();
	/**
	 * Original signature : <code>int arrTest(int)</code><br>
	 * <i>native declaration : main/cpp/clib.h:4</i>
	 */
	@Name("arrTest") 
	public static native int arrTest(int size);
	/**
	 * Original signature : <code>int arrSum(int*, int)</code><br>
	 * <i>native declaration : main/cpp/clib.h:6</i>
	 */
	@Name("arrSum") 
	public static int arrSum(Pointer<Integer > arr, int size) {
		return arrSum(Pointer.getPeer(arr), size);
	}
	@Name("arrSum") 
	protected native static int arrSum(@Ptr long arr, int size);
	/**
	 * Original signature : <code>void malisLoss(const int*, const float*, const double*, const int*, const double, const bool, float*, double*, double*)</code><br>
	 * <i>native declaration : main/cpp/clib.h:8</i>
	 */
	@Name("malisLoss") 
	public static void malisLoss(Pointer<Integer > dims, Pointer<Float > conn, Pointer<Double > nhood, Pointer<Integer > seg, double margin, boolean pos, Pointer<Float > losses, Pointer<Double > loss, Pointer<Double > randIndex) {
		malisLoss(Pointer.getPeer(dims), Pointer.getPeer(conn), Pointer.getPeer(nhood), Pointer.getPeer(seg), margin, pos, Pointer.getPeer(losses), Pointer.getPeer(loss), Pointer.getPeer(randIndex));
	}
	@Name("malisLoss") 
	protected native static void malisLoss(@Ptr long dims, @Ptr long conn, @Ptr long nhood, @Ptr long seg, double margin, boolean pos, @Ptr long losses, @Ptr long loss, @Ptr long randIndex);
}
